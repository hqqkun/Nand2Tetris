// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        if (maxLen = 0) {
            let maxLen = 1;
        }
        let str = Array.new(maxLen);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLen) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int startIndex;
        var int ans;
        var boolean isFalse;
        var char currentChar;

        let startIndex = 0;
        let ans = 0;
        let isFalse = false;
        let currentChar = str[0];

        if (length = 0) {
            return 0;
        }
        if (str[0] = 45) {
            let isFalse = true;
            let startIndex = 1;
            let currentChar = str[1];
        }

        while ((startIndex < length) & (currentChar > 47) & (currentChar < 58)) {
            let ans = (ans * 10) + (currentChar - 48);
            let startIndex = startIndex + 1;
            let currentChar = str[startIndex];
        }
        if (isFalse) {
            return -ans;
        } else {
            return ans;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do helper(val);
        return;
    }

    method void helper(int val) {
        var int div;
        var int remainder;

        if (val < 10) {
            let str[length] = val + 48;
        } else {
            let div = val / 10;
            let remainder = val - (div * 10);
            do helper(div);
            let str[length] = remainder + 48;
        }
        let length = length + 1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}